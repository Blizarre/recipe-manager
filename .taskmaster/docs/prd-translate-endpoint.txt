# Product Requirements Document: Recipe French Translation HTTP Endpoint

## Overview

Add a new HTTP endpoint to the recipe management API that returns HTML-formatted versions of markdown recipes, translated to French using OpenAI's language models.

## Feature Description

### Core Functionality
- New HTTP endpoint: `GET /api/recipes/{path:path}/translate`
- Reads the specified markdown recipe file
- Translates the content to French using OpenAI API
- Converts the translated markdown to HTML
- Returns the HTML response with appropriate content-type headers

### Technical Requirements

#### API Endpoint Specification
- **Route**: `GET /api/recipes/{path:path}/translate`
- **Parameters**:
  - `path` (path parameter): Recipe file path (without .md extension)
- **Response**: HTML content with `Content-Type: text/html`
- **Error Handling**: 
  - 404 if recipe file not found
  - 500 if OpenAI API fails or other translation errors

#### Dependencies
- Add OpenAI Python package to pyproject.toml dependencies
- Configure OpenAI API key via environment variable (OPENAI_API_KEY)

#### Translation Logic
- Read markdown recipe from filesystem using existing FileSystemManager
- Send markdown content to OpenAI with placeholder translation prompt (to be implemented later)
- Convert translated markdown to HTML using a markdown processor

#### HTML Conversion
- Convert translated markdown to HTML using a markdown processor
- Apply basic styling for recipe formatting
- Ensure proper HTML structure with semantic elements

### Implementation Details

#### New Dependencies Required
```toml
dependencies = [
    # existing dependencies...
    "openai>=1.0.0",
    "markdown>=3.5.0",
]
```

#### Environment Configuration
- `OPENAI_API_KEY`: Required environment variable for OpenAI API access

#### File Structure Changes
- Add translation logic to `api/routes.py` or create new `api/translation.py` module
- Update route registration in main router

#### Translation Prompt
- Placeholder prompt to be implemented later (out of scope for this work)
- Function structure should support prompt customization

### API Usage Examples

#### Request
```
GET /api/recipes/pasta-carbonara/translate
```

#### Response
```html
<html>
<head>
    <title>Pasta Carbonara</title>
    <style>
        /* Basic recipe styling */
        body { font-family: Arial, sans-serif; margin: 20px; }
        h1, h2 { color: #333; }
        ul, ol { margin: 10px 0; }
    </style>
</head>
<body>
    <h1>Pasta Carbonara</h1>
    <h2>Ingrédients</h2>
    <ul>
        <li>400g de spaghettis</li>
        <li>200g de pancetta</li>
        ...
    </ul>
    <h2>Instructions</h2>
    <ol>
        <li>Faire bouillir de l'eau salée dans une grande casserole...</li>
        ...
    </ol>
</body>
</html>
```

### Error Handling

#### Invalid Recipe Path
- Return 404 with error message if recipe file doesn't exist
- Validate path using existing filesystem validation

#### OpenAI API Failures
- Return 500 with generic error message (don't expose API details)
- Log detailed errors for debugging

### Security Considerations

#### API Key Management
- Store OpenAI API key in environment variables
- Never expose API key in responses or logs
- Validate API key exists at startup

#### Input Validation
- Sanitize recipe path using existing validation
- Prevent path traversal attacks using existing filesystem security

### Performance Considerations

#### Async Processing
- Use async/await for OpenAI API calls
- Maintain non-blocking behavior consistent with existing endpoints

### Testing Requirements

#### Unit Tests
- Test translation logic with mock OpenAI responses
- Test HTML conversion functionality
- Test error handling scenarios

#### Integration Tests
- Test full endpoint with actual OpenAI API (in development)
- Test error scenarios (missing files, API failures)

### Success Criteria

#### Functional Requirements
- Endpoint successfully translates recipes to French
- HTML output displays properly formatted recipes
- Error handling provides appropriate feedback

#### Non-Functional Requirements
- Maintains existing API performance
- Handles concurrent translation requests

### Implementation Priority

#### Phase 1: Core Implementation
1. Add OpenAI dependency and configuration
2. Implement basic translation endpoint with placeholder prompt
3. Add HTML conversion functionality
4. Basic error handling

### Technical Debt Considerations

#### Code Organization
- Keep translation logic modular and testable
- Follow existing code patterns and style
- Maintain separation of concerns