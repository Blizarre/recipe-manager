# Recipe Manager - Product Requirements Document

## Project Overview

A minimalist single-user web application for managing recipes with zero-friction editing and organization. The app provides a simple file-based recipe management system using markdown format with enforced structure for consistency. Authentication and authorization are handled externally by a reverse proxy server.

## Core Vision

Create the simplest possible recipe management experience where users can:
- Browse recipes in a familiar file tree interface
- Edit recipes directly in markdown with syntax highlighting
- Create new recipes with minimal clicks
- Maintain consistent recipe structure across all files

## Technical Architecture

### Backend
- **Framework**: Python 3 with FastAPI
- **Data Storage**: Plain text markdown files on server filesystem
- **File Organization**: Directory-based recipe categorization
- **API**: RESTful endpoints for file operations (CRUD)

### Frontend
- **Technology**: Plain JavaScript and CSS (no frameworks)
- **Editor**: Markdown editor with syntax highlighting
- **Layout**: Two-panel interface (file tree + editor)
- **Styling**: Minimal, clean design focusing on readability

## User Interface Requirements

### Layout Structure
- **Desktop Layout**: Two-panel interface
  - **Left Panel**: Directory tree view of recipe files
    - Collapsible folders for categorization
    - File icons and names
    - Right-click context menu for file operations
  - **Right Panel**: Markdown editor with live preview
    - Syntax highlighting for markdown
    - Toggle between edit/preview modes
    - Auto-save functionality
- **Mobile Layout**: Single-panel with navigation drawer
  - **Navigation Drawer**: Slide-out file tree accessible via hamburger menu
  - **Main Panel**: Full-screen markdown editor optimized for touch
  - **Touch Controls**: Large tap targets, swipe gestures for navigation

### Friction Reduction Features
- **Quick File Creation**: 
  - Right-click "New Recipe" in any folder (desktop)
  - Long-press for context menu (mobile)
  - Keyboard shortcut (Ctrl+N)
  - Floating action button (mobile)
  - Template auto-population with required sections
- **Instant Editing**: Single-click to open and edit files
- **Auto-Save**: Changes saved automatically every few seconds
- **Navigation**: 
  - Arrow keys to navigate file tree (desktop)
  - Swipe gestures for mobile navigation
  - Touch-optimized tap targets (44px minimum)

## Recipe File Structure

All recipe files must enforce this standardized markdown structure:

```markdown
# Recipe Title

## Ingredients
- ingredient 1
- ingredient 2
- ingredient 3

## Instructions
1. First step
2. Second step
3. Third step

## Notes
Free-form text for additional notes, tips, variations, etc.
```

### Validation Rules
- All three sections (Ingredients, Instructions, Notes) must be present
- Ingredients must use bullet points (- or *)
- Instructions must use numbered lists (1., 2., 3.)
- Notes section can contain any markdown content
- File names should be URL-friendly (no spaces, special chars)

## Core Features

### File Management
- **Browse**: Navigate recipe collection via directory tree
- **Create**: Add new recipe files with enforced template
- **Edit**: In-place markdown editing with syntax highlighting
- **Delete**: Remove recipes with confirmation dialog
- **Rename**: Rename files directly in tree view
- **Move**: Drag-and-drop files between folders

### Editor Features
- **Markdown Syntax Highlighting**: Highlight headers, lists, emphasis
- **Live Preview**: Toggle between edit and rendered view
- **Auto-Complete**: Suggest common ingredient/instruction patterns
- **Section Validation**: Warn if required sections are missing
- **Auto-Save**: Save changes every 3-5 seconds

### Search and Organization
- **Quick Search**: Filter file tree by recipe name
- **Full-Text Search**: Search within recipe content
- **Folder Creation**: Add new categories/folders
- **Alphabetical Sorting**: Auto-sort files within folders

## API Endpoints

### File Operations
- `GET /api/files` - List all recipe files and directories
- `GET /api/files/{path}` - Get specific file content
- `POST /api/files/{path}` - Create new file
- `PUT /api/files/{path}` - Update file content
- `DELETE /api/files/{path}` - Delete file
- `POST /api/files/{path}/move` - Move/rename file

### Directory Operations
- `GET /api/directories` - Get directory tree structure
- `POST /api/directories/{path}` - Create new directory
- `DELETE /api/directories/{path}` - Delete directory

### Search Operations
- `GET /api/search?q={query}` - Search recipe content
- `GET /api/search/files?q={query}` - Search file names

## User Experience Requirements

### Performance Goals
- **File Load Time**: < 100ms for opening any recipe
- **Auto-Save Delay**: 3-5 seconds after last edit
- **Search Response**: < 200ms for search results
- **Tree Navigation**: Instant folder expand/collapse

### Usability Requirements
- **Zero Learning Curve**: Familiar file explorer interface
- **Keyboard Accessible**: All functions available via keyboard
- **Mobile First**: Fully functional on mobile devices with touch-optimized interface
- **Mobile Responsive**: Usable on tablets and phones with appropriate layouts
- **Error Prevention**: Validation before destructive operations

## Success Criteria

### Primary Goals
1. **Minimal Friction**: Users can create/edit recipes in under 3 clicks
2. **Fast Performance**: All operations feel instant (<200ms response)
3. **Data Integrity**: No recipe data loss, proper auto-save
4. **Consistency**: All recipes follow the enforced structure

### Secondary Goals
1. **Search Efficiency**: Find any recipe in under 5 seconds
2. **Organization**: Easy categorization with folder structure
3. **Mobile Usability**: Full functionality on touch devices
4. **Backup Friendly**: Plain text files easy to backup/version

## Implementation Phases

### Phase 1: Core Infrastructure
- FastAPI backend with file system operations
- Basic directory tree API endpoints
- Simple file CRUD operations
- Basic frontend with file tree and editor

### Phase 2: Enhanced Editing
- Markdown syntax highlighting
- Template enforcement for new files
- Auto-save functionality
- Basic validation for recipe structure

### Phase 3: Mobile & User Experience
- Mobile-first responsive design
- Touch-optimized interface
- Quick file creation workflows
- Keyboard shortcuts and navigation
- Search functionality
- Gesture-based navigation

### Phase 4: Polish and Optimization
- Performance optimization
- Error handling and validation
- Advanced markdown features
- User preferences and settings

## Technical Constraints

### File System Requirements
- Recipes stored as `.md` files in organized directory structure
- File names must be filesystem-safe
- Support for nested folder organization
- UTF-8 encoding for international characters

### Browser Compatibility
- Modern browsers (Chrome 90+, Firefox 88+, Safari 14+)
- JavaScript ES6+ features
- CSS Grid and Flexbox support
- Local storage for user preferences

### Security Considerations
- Input sanitization for file operations
- Path traversal protection
- File type validation (markdown only)
- Single-user application (no authentication/authorization needed)
- Authentication and authorization handled by reverse proxy

## Future Enhancements

### Potential Features (Not MVP)
- Recipe import from URLs
- Ingredient quantity scaling
- Shopping list generation
- Recipe sharing/export
- Image attachment support
- Recipe ratings and favorites
- Version history

### Integration Possibilities
- Git integration for version control
- Cloud storage sync (Dropbox, Google Drive)
- Recipe sharing platforms
- Nutrition calculation APIs
- Grocery delivery service integration

## Success Metrics

### User Engagement
- Time from app load to editing a recipe
- Number of recipes created per session
- Frequency of recipe modifications
- User retention over time

### Technical Performance
- API response times
- File load/save success rates
- Search query performance
- Mobile usability scores

### Content Quality
- Percentage of recipes following proper structure
- Average recipe completeness
- User-reported data integrity issues